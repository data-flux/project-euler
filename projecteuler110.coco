#!/usr/bin/env coconut-run
"""
PROBLEM: 110
AUTHOR:  Dirk Meijer
STATUS:  done
EXPLANATION:
    assuming y>=x
    x \in (n,2n]
    n is bound to have a lot of prime factors
    y=(x*n)/(x-n)

    - if n is a prime, the # solution is 2.
    - if we multiply n by a prime,
        the # solutions S becomes:
        S <- ((2k+1)S-1)/(2k-1)
        where k is how often that primes appears in the new n.

    making the assumption that every factor appears a maximum of 4 times,
    and the miximum prime factor is 47, we calculate all possible primordials
    and take the lowest that exceeds 4_000_000 solutions
"""

from Euler.tictoc import tic,toc
from Euler.eprint import eprint
from itertools import product as iterprod

primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]
minimum = 4_000_000
sol = n -> sum(x*n%(x-n)==0 for x in range(n+1,2*n+1))
prod = reduce$(*)
primordial = f-> prod(map(x->pow(*x),f.items()))
def factsol(f):
    """solution function more efficient for prime factorizations"""
    S=1
    for p in f.keys():
        for k in range(1,f[p]+1):
            S = ((2*k+1)*S-1)//(2*k-1)
    return S
def minimal(f):
    last = 5
    for p in primes:
        if f[p]>last:
            return False
        last = f[p]
    return True

if __name__=="__main__":
    tic()
    x = ([range(4)]*len(primes[:5])+[range(2)]*len(primes[5:])) #only check high occurences for low primes
    comb = map(
        l->{primes[i]:l[i] for i in range(len(primes))}
        ,iterprod(*x)
    )
    bestS = 50_000_000
    bestN = 0
    for factors in comb:
        if not minimal(factors):
            continue
        S = factsol(factors)
        if S<minimum:
            continue
        if S<bestS:
            bestS = S
            bestN = primordial(factors)
    print(bestN)
    toc()
    exit()
