#!/usr/bin/env coconut-run
"""
PROBLEM: 069
AUTHOR:  Dirk Meijer
STATUS:  done
EXPLANATION:
    efficient totient implementation makes for easy calculation.
    best n is probably a primordial
"""

from Euler.tictoc import tic,toc
from Euler.eprint import eprint
from Euler.gcdlcm import totient
from Euler.primes import isprime

prod = reduce$(*)

if __name__=="__main__":
    tic()
    primes = [p in range(2,30) if isprime(p)]
    best = 0
    bestn = 0
    n = 1
    for p in primes:
        n *= p
        if n>1_000_000:
            break
        if n/totient(n) > best:
            best = n/totient(n)
            bestn = n
            print(f"{n}/t({n}) = {best}")
    print(bestn)
    toc()
    exit()
